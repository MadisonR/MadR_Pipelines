dplyr: verbs for manipulating data-frames
========================================================
autosize: true
author: Tristan Mahr, @tjmahr
date: March 18, 2015
css: assets/custom.css

Madison R Users Group

Repository for this talk: https://github.com/tjmahr/MadR_Pipelines

```{r, echo = FALSE}
options(
  width = 45,
  dplyr.width = 44,
  dplyr.print_min = 4,
  dplyr.print_max = 4)
```



Plan
========================================================

We [just covered pipelines][magrittr_talk]. Now we'll use pipelines to
work on tabular data.

```{r}
library("magrittr")
library("dplyr")
library("nycflights13")
```

## Examples

The examples for the main dplyr verbs were lifted from the
[introductory vignette][dplyr_intro].

[magrittr_talk]: http://rpubs.com/tjmahr/pipelines_2015
[dplyr_intro]: http://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html



There's a cheatsheet!
========================================================

![](assets/data-wrangling-cheatsheet.png)

[http://www.rstudio.com/resources/cheatsheets/][cheatsheets]

[cheatsheets]: http://www.rstudio.com/resources/cheatsheets/



nycflights13
========================================================

Convert data to a `tbl_df` so that it uses dplyr's nice `print` method.

```{r}
flights <- tbl_df(flights)
flights
```



glimpse
========================================================
incremental: true

Use `glimpse` to few some values in each column.

```{r}
glimpse(flights)
```



Question
========================================================
type: prompt
incremental: true

> Is dpylr's print method really that useful since it's just
printing four rows of four columns on these slides?

It normally fills width of the console. I cheated to accommodate
the width of these slides, by setting some hidden flags:

```{r, eval = FALSE}
options(
  width = 45,
  dplyr.width = 44,
  dplyr.print_min = 4,
  dplyr.print_max = 4)
```



filter: inspect subsets of data
========================================================
incremental: true

How many flights flew to Madison in 2013?

```{r}
flights %>%
  filter(dest == "MSN")
```



filter: multiple conditions
========================================================
incremental: true

How many flights flew to Madison in first week of January?

```{r}
# Comma separated conditions are combined with '&'
flights %>%
  filter(dest == "MSN", month == 1, day <= 7)
```



Question
========================================================
type: prompt
incremental: true

> Commas in the filter statement are implicit `&` (and) operators.
Is there anything similar for `|` (or)?

Logical or statements are supported, but there's no shorthand.

```{r, eval = FALSE}
flights %>%
  filter(dest == "MSN" | dest == "ORD" | dest == "MDW")
```

For more complicated checks, I would try a set operation.

```{r, eval = FALSE}
flights %>%
  filter(is.element(dest, c("MSN", "ORD", "MDW")))
```



arrange: sort columns
========================================================
incremental: true

Sort by which airport they departed from in NYC, then year, month, day.

```{r}
flights %>%
  arrange(origin, year, month, day)
```



desc: reverses sorting of a column
========================================================
incremental: true

Find longest delayed flights to Madison.

```{r}
flights %>%
  filter(dest == "MSN") %>%
  arrange(desc(dep_delay))
```



select
========================================================
incremental: true

Select the columns you want.

```{r}
flights %>%
  select(origin, year, month, day)
```



select's helpers
========================================================
incremental: true

`select` has many helper functions. See `?select`.

```{r}
flights %>%
  select(origin, year:day, starts_with("dep"))
```



negative selecting
========================================================
incremental: true

We can drop columns by "negating" the name. Since helpers
give us column names, we can negate them too.

```{r}
flights %>%
  select(-dest, -starts_with("arr"),
         -ends_with("time"))
```



Recap: Verbs for inspecting data
=======================================================

* convert to a `tbl_df` - nice print method
* `glimpse` - some of each column
* `filter` - subsetting
* `arrange` - sorting (`desc` to reverse the sort)
* `select` - picking (and omiting) columns



rename
========================================================
incremental: true

Rename columns with `rename(NewName = OldName)`. To keep the order
correct, read/remember the renaming `=` as "was".

```{r}
flights %>%
  rename(y = year, m = month, d = day)
```



mutate
=========================================================
incremental: true

How much departure delay did the flight make up for in the air?

```{r}
flights %>%
  mutate(
    gain = arr_delay - dep_delay,
    speed = (distance / air_time) * 60,
    gain_per_hour = gain / (air_time / 60)) %>%
  select(gain:gain_per_hour)
```

```{r, echo = FALSE}
# I realize that transmute is equivalent to mutate + select
```



group_by
=========================================================
incremental: true

Let's compute the average delay per month of flights to Madison.

Normally--in `aggregate`, `by` or plyr's `d*ply` functions--you
specify the grouping as an argument to the aggregation function.

```{r}
aggregate(dep_delay ~ month, flights, mean,
          subset = flights$dest == "MSN")
```



group_by
=========================================================
incremental: true

In dplyr, grouping is its own action. It is done as its own step in
the pipeline. Here, we `filter` to the flights to Madison and
`group_by` month.

```{r}
msn_by_month <- flights %>%
  filter(dest == "MSN") %>%
  group_by(month)
msn_by_month
```



summarise
=========================================================
incremental: true

Now we use `summarise` to compute (several) aggregate values within
each group (month). `summarise` returns one row per group.

```{r}
msn_by_month %>%
  summarise(
    flights = n(),
    avg_delay = mean(dep_delay, na.rm = TRUE),
    n_planes = n_distinct(tailnum))
```



tally
=========================================================
incremental: true

`tally` is a shortcut for counting number of items per group.

Number of flights from NYC by destination by month:

```{r}
flights %>%
  group_by(dest, month) %>%
  tally
```



ungroup
=========================================================
incremental: true

Remove the grouping structure with `ungroup`.

```{r}
msn_by_month %>% ungroup
```



Summarizing undoes grouping.
=========================================================
incremental: true

Each `summarise` statement peels off one layer of grouping (from the
right of the list of groups).

```{r}
# day gets peeled off
per_day <- flights %>%
  group_by(dest, year, month, day) %>%
  summarise(flights = n())
per_day
```



=========================================================
title: false
incremental: true

Peel off `month` grouping.

```{r}
per_month <- per_day %>%
  summarise(flights = sum(flights))
per_month
```



=========================================================
title: false
incremental: true

Peel off `year` grouping.

```{r}
per_year <- per_month %>%
  summarise(flights = sum(flights))
per_year
```



Question
========================================================
type: prompt

> Is there a way to keep a group after a `summarise` statement?

The grouping variable goes away because `summarise` returns one row
for each value of the grouping variable. If you `group_by` month and
`summarise`, you have a row for each month. You can add the month
grouping back to the data-frame, but this is almost always not
necessary because you have only row per group at that point.

Relatedly, you can group by row with `rowwise`.



mutate also respects grouping
=========================================================
incremental: true

Rank flight delays within each destination and month. (dplyr provides
a bunch of ranking functions. See the [cheatsheet][cheatsheets].)

```{r}
flights %>%
  group_by(dest, month) %>%
  mutate(timely = row_number(dep_delay),
         late = row_number(desc(dep_delay))) %>%
  select(dep_delay, timely:late)
```

[cheatsheets]: http://www.rstudio.com/resources/cheatsheets/



mutate also respects grouping
=========================================================
incremental: true

This is also good for mean-centering variables within groups.

```{r}
mean_center <- function(xs) {
  xs - mean(xs, na.rm = TRUE)
}
flights %>%
  group_by(dest, month) %>%
  mutate(c_delay = mean_center(dep_delay)) %>%
  select(dep_delay, c_delay)
```



That covers 80% of dplyr
========================================================

- select
- filter
- arrange
- glimpse
- rename
- mutate
- group_by, ungroup
- summarise



Other 20%
========================================================

- assembly: bind_rows, bind_cols
- column-wise operations: mutate_each, summarise_each
- join tables together: left_join, right_join, inner_join, full_join
- filtering joins: semi_join, anti_join
- do: arbitrary code on each chunk
- different types of tabular data (databases, data.tables)



Questions?
========================================================
type: prompt



Last Section
========================================================

For fun, I demonstrated how I use [pipelines when making tables](http://rpubs.com/tjmahr/prettytables_2015).
